{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar PDFName = require('./name');\n\nvar PDFValue = require('./value');\n\nvar PDFDictionary = /*#__PURE__*/function () {\n  function PDFDictionary(dictionary) {\n    _classCallCheck(this, PDFDictionary);\n\n    this.dictionary = {};\n\n    if (dictionary) {\n      for (var key in dictionary) {\n        this.add(key, dictionary[key]);\n      }\n    }\n  }\n\n  _createClass(PDFDictionary, [{\n    key: \"add\",\n    value: function add(key, val) {\n      if (typeof val === 'string') {\n        val = new PDFName(val);\n      }\n\n      this.dictionary[new PDFName(key)] = val;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      this.add(key, val);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return String(new PDFName(key)) in this.dictionary;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.dictionary[new PDFName(key)];\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      delete this.dictionary[new PDFName(key)];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      var length = 0;\n\n      for (var key in this.dictionary) {\n        length++;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = '';\n\n      for (var key in this.dictionary) {\n        var val = this.dictionary[key];\n        str += \"\".concat(key, \" \").concat(val === null ? 'null' : val).replace(/^/gm, '\\t') + '\\n';\n      }\n\n      return \"<<\\n\".concat(str, \">>\");\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      if (lexer.getString(2) !== '<<') {\n        if (trial) {\n          return undefined;\n        }\n\n        throw new Error('Invalid dictionary');\n      }\n\n      lexer.shift(2);\n      lexer.skipWhitespace(null, true);\n      var dictionary = new PDFDictionary();\n\n      while (lexer.getString(2) !== '>>') {\n        var key = PDFName.parse(xref, lexer);\n        lexer.skipWhitespace(null, true);\n        var value = PDFValue.parse(xref, lexer);\n        dictionary.set(key, value);\n        lexer.skipWhitespace(null, true);\n      }\n\n      lexer.shift(2);\n      return dictionary;\n    }\n  }]);\n\n  return PDFDictionary;\n}();\n\nmodule.exports = PDFDictionary;","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/object/dictionary.js"],"names":["PDFName","require","PDFValue","PDFDictionary","dictionary","key","add","val","String","length","str","replace","xref","lexer","trial","getString","undefined","Error","shift","skipWhitespace","parse","value","set","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst PDFName = require('./name')\nconst PDFValue = require('./value')\n\nclass PDFDictionary {\n  constructor(dictionary) {\n    this.dictionary = {}\n    if (dictionary) {\n      for (const key in dictionary) {\n        this.add(key, dictionary[key])\n      }\n    }\n  }\n\n  add(key, val) {\n    if (typeof val === 'string') {\n      val = new PDFName(val)\n    }\n    this.dictionary[new PDFName(key)] = val\n  }\n\n  set(key, val) {\n    this.add(key, val)\n  }\n\n  has(key) {\n    return String(new PDFName(key)) in this.dictionary\n  }\n\n  get(key) {\n    return this.dictionary[new PDFName(key)]\n  }\n\n  del(key) {\n    delete this.dictionary[new PDFName(key)]\n  }\n\n  get length() {\n    let length = 0\n    for (const key in this.dictionary) {\n      length++\n    }\n    return length\n  }\n\n  toString() {\n    let str = ''\n    for (const key in this.dictionary) {\n      const val = this.dictionary[key]\n      str += `${key} ${val === null ? 'null' : val}`.replace(/^/gm, '\\t') + '\\n'\n    }\n    return `<<\\n${str}>>`\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(2) !== '<<') {\n      if (trial) {\n        return undefined\n      }\n\n      throw new Error('Invalid dictionary')\n    }\n\n    lexer.shift(2)\n    lexer.skipWhitespace(null, true)\n\n    const dictionary = new PDFDictionary()\n\n    while (lexer.getString(2) !== '>>') {\n      const key = PDFName.parse(xref, lexer)\n      lexer.skipWhitespace(null, true)\n\n      const value = PDFValue.parse(xref, lexer)\n      dictionary.set(key, value)\n\n      lexer.skipWhitespace(null, true)\n    }\n\n    lexer.shift(2)\n\n    return dictionary\n  }\n}\n\nmodule.exports = PDFDictionary\n"]},"metadata":{},"sourceType":"script"}