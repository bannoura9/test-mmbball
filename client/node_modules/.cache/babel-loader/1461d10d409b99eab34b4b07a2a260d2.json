{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar PDFName = /*#__PURE__*/function () {\n  function PDFName(name) {\n    _classCallCheck(this, PDFName);\n\n    if (!name) {\n      throw new Error('A Name cannot be undefined');\n    }\n\n    if (name instanceof PDFName) {\n      return name;\n    }\n\n    if (name[0] === '/') {\n      name = name.substr(1);\n    } // white-space characters are not allowed\n\n\n    if (name.match(/[\\x00]/)) {\n      throw new Error('A Name mustn\\'t contain the null characters');\n    } // delimiter characters are not allowed\n\n\n    if (name.match(/[\\(\\)<>\\[\\]\\{\\}\\/\\%]/)) {\n      throw new Error('A Name mustn\\'t contain delimiter characters');\n    }\n\n    name = name.toString(); // Beginning with PDF 1.2, any character except null (character code 0)\n    // may be included in a name by writing its 2-digit hexadecimal code,\n    // preceded by the number sign character (#)\n    // ... it is recommended but not required for characters whose codes\n    // are outside the range 33 (!) to 126 (~)\n\n    name = name.replace(/[^\\x21-\\x7e]/g, function (c) {\n      var code = c.charCodeAt(0); // replace unicode characters with `_`\n\n      if (code > 0xff) {\n        code = 0x5f;\n      }\n\n      return '#' + code;\n    });\n    this.name = name;\n  }\n\n  _createClass(PDFName, [{\n    key: \"toString\",\n    value: function toString() {\n      return '/' + this.name;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(xref, lexer, trial) {\n      if (lexer.getString(1) !== '/') {\n        if (trial) {\n          return undefined;\n        }\n\n        throw new Error('Name must start with a leading slash, found: ' + lexer.getString(1));\n      }\n\n      lexer.shift(1);\n      var name = '';\n      var done = false;\n      var c;\n\n      while (!done && (c = lexer._nextCharCode()) >= 0) {\n        switch (true) {\n          case c === 0x28: // (\n\n          case c === 0x29: // )\n\n          case c === 0x3c: // <\n\n          case c === 0x3e: // >\n\n          case c === 0x5b: // [\n\n          case c === 0x5d: // ]\n\n          case c === 0x7b: // {\n\n          case c === 0x7d: // }\n\n          case c === 0x2f: // /\n\n          case c === 0x25:\n            // %\n            done = true;\n            break;\n\n          case c === 0x23:\n            // #\n            var hex = lexer.readString(2);\n            name += String.fromCharCode(parseInt(hex, 16));\n            break;\n\n          case c >= 0x22 && c <= 0x7e:\n            // inside range of 33 (!) to 126 (~)\n            name += String.fromCharCode(c);\n            break;\n\n          default:\n            done = true;\n            break;\n        }\n      }\n\n      lexer.shift(-1);\n      return new PDFName(name);\n    }\n  }]);\n\n  return PDFName;\n}();\n\nmodule.exports = PDFName;","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/object/name.js"],"names":["PDFName","name","Error","substr","match","toString","replace","c","code","charCodeAt","xref","lexer","trial","getString","undefined","shift","done","_nextCharCode","hex","readString","String","fromCharCode","parseInt","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nclass PDFName {\n  constructor(name) {\n    if (!name) {\n      throw new Error('A Name cannot be undefined')\n    }\n\n    if (name instanceof PDFName) {\n      return name\n    }\n\n    if (name[0] === '/') {\n      name = name.substr(1)\n    }\n\n    // white-space characters are not allowed\n    if (name.match(/[\\x00]/)) {\n      throw new Error('A Name mustn\\'t contain the null characters')\n    }\n\n    // delimiter characters are not allowed\n    if (name.match(/[\\(\\)<>\\[\\]\\{\\}\\/\\%]/)) {\n      throw new Error('A Name mustn\\'t contain delimiter characters')\n    }\n\n    name = name.toString()\n\n    // Beginning with PDF 1.2, any character except null (character code 0)\n    // may be included in a name by writing its 2-digit hexadecimal code,\n    // preceded by the number sign character (#)\n    // ... it is recommended but not required for characters whose codes\n    // are outside the range 33 (!) to 126 (~)\n    name = name.replace(/[^\\x21-\\x7e]/g, function(c) {\n      let code = c.charCodeAt(0)\n      // replace unicode characters with `_`\n      if (code > 0xff) {\n        code = 0x5f\n      }\n      return '#' + code\n    })\n\n    this.name = name\n  }\n\n  toString() {\n    return '/' + this.name\n  }\n\n  static parse(xref, lexer, trial) {\n    if (lexer.getString(1) !== '/') {\n      if (trial) {\n        return undefined\n      }\n\n      throw new Error('Name must start with a leading slash, found: ' + lexer.getString(1))\n    }\n\n    lexer.shift(1)\n\n    let name = ''\n\n    let done = false\n    let c\n    while (!done && (c = lexer._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x28: // (\n        case c === 0x29: // )\n        case c === 0x3c: // <\n        case c === 0x3e: // >\n        case c === 0x5b: // [\n        case c === 0x5d: // ]\n        case c === 0x7b: // {\n        case c === 0x7d: // }\n        case c === 0x2f: // /\n        case c === 0x25: // %\n          done = true\n          break\n        case c === 0x23: // #\n          const hex = lexer.readString(2)\n          name += String.fromCharCode(parseInt(hex, 16))\n          break\n        case c >= 0x22 && c <= 0x7e: // inside range of 33 (!) to 126 (~)\n          name += String.fromCharCode(c)\n          break\n        default:\n          done = true\n          break\n      }\n    }\n\n    lexer.shift(-1)\n\n    return new PDFName(name)\n  }\n}\n\nmodule.exports = PDFName\n"]},"metadata":{},"sourceType":"script"}