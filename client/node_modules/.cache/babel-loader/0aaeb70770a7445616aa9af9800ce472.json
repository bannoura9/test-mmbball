{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(buf, outer) {\n    _classCallCheck(this, Lexer);\n\n    this.buf = buf;\n    this.pos = 0;\n    this.objects = Object.create(null);\n    this._outer = outer;\n    this.state = outer ? outer.state : {};\n  }\n\n  _createClass(Lexer, [{\n    key: \"outer\",\n    get: function get() {\n      return this._outer || this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(len) {\n      var buf = this.buf.subarray(this.pos, this.pos + len);\n      this.pos += len;\n      return buf;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(len) {\n      return String.fromCharCode.apply(null, this.buf.subarray(this.pos, this.pos + len));\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(len) {\n      var str = this.getString(len);\n      this.pos += len;\n      return str;\n    }\n  }, {\n    key: \"skipEOL\",\n    value: function skipEOL(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n\n      while (!done && (!len || count < len)) {\n        switch (this.buf[this.pos]) {\n          case 0x0d:\n            // CR\n            if (this.buf[this.pos + 1] === 0x0a) {\n              // CR LF\n              this.pos++;\n            }\n\n          // falls through\n\n          case 0x0a:\n            // LF\n            this.pos++;\n            count++;\n            break;\n\n          default:\n            done = true;\n            break;\n        }\n      }\n\n      if (!count || len && count < len) {\n        if (!trial) {\n          this._error('EOL expected but not found');\n        }\n\n        this.pos = before;\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"skipComments\",\n    value: function skipComments(trial) {\n      if (this.getString(1) !== '%') {\n        return false;\n      }\n\n      var pos = this.pos;\n\n      while (this.buf[pos] !== 0x0A) {\n        pos++;\n      }\n\n      if (!trial) {\n        this.pos = pos;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"skipWhitespace\",\n    value: function skipWhitespace(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n\n      while (!done && (!len || count < len)) {\n        // skip comments\n        if (this.buf[this.pos] === 0x25\n        /* % */\n        ) {\n            while (this.buf[this.pos] !== 0x0A) {\n              this.pos++;\n            }\n          }\n\n        if (Lexer.isWhiteSpace(this.buf[this.pos])) {\n          this.pos++;\n          count++;\n        } else {\n          done = true;\n        }\n      }\n\n      if (!count || len && count < len) {\n        if (!trial) {\n          this._error('Whitespace expected but not found');\n        }\n\n        this.pos = before;\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace(len, trial) {\n      var before = this.pos;\n      var done = false;\n      var count = 0;\n\n      while (!done && (!len || count < len)) {\n        if (this.buf[this.pos] === 0x20) {\n          this.pos++;\n          count++;\n        } else {\n          done = true;\n        }\n      }\n\n      if (len > 0 && !count || len && count < len) {\n        if (!trial) {\n          this._error('Space expected but not found');\n        }\n\n        this.pos = before;\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift(offset) {\n      this.pos += offset;\n    }\n  }, {\n    key: \"_nextCharCode\",\n    value: function _nextCharCode() {\n      return this.buf[this.pos++];\n    }\n  }, {\n    key: \"_nextChar\",\n    value: function _nextChar() {\n      return String.fromCharCode(this.buf[this.pos++]);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      throw new Error(err);\n    }\n  }, {\n    key: \"_warning\",\n    value: function _warning(warning) {\n      console.warn(warning);\n    } // e.g. 123 43445 +17 −98 0 34.5 −3.62 +123.6 4. −.002 0.0\n\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(trial) {\n      var before = this.pos;\n\n      var c = this._nextCharCode();\n\n      var sign = 1;\n      var isFloat = false;\n      var str = '';\n\n      switch (true) {\n        case c === 0x2b:\n          // '+'\n          break;\n\n        case c === 0x2d:\n          // '-'\n          sign = -1;\n          break;\n\n        case c === 0x2e:\n          // '.'\n          isFloat = true;\n          str = '0.';\n          break;\n\n        case c < 0x30 || c > 0x39:\n          // not a number\n          if (!trial) {\n            this._error('Invalid number at ' + this.pos + ': ' + String.fromCharCode(c) + ' (code: ' + c + ')');\n          }\n\n          this.pos = before;\n          return undefined;\n\n        default:\n          str += String.fromCharCode(c);\n          break;\n      }\n\n      var done = false;\n\n      while (!done && (c = this._nextCharCode()) >= 0) {\n        switch (true) {\n          case c === 0x2e:\n            // '.'\n            if (isFloat) {\n              done = true;\n            } else {\n              isFloat = true;\n              str += '.';\n            }\n\n            break;\n\n          case c >= 0x30 && c <= 0x39:\n            // 0 - 9\n            str += String.fromCharCode(c);\n            break;\n\n          default:\n            done = true;\n            break;\n        }\n      }\n\n      this.pos--;\n      var nr = isFloat ? parseFloat(str, 10) : parseInt(str, 10);\n      return nr * sign;\n    }\n  }], [{\n    key: \"isWhiteSpace\",\n    value: function isWhiteSpace(c) {\n      return c === 0x00 || // NULL\n      c === 0x09 || // TAB\n      c === 0x0A || // LF\n      c === 0x0C || // FF\n      c === 0x0D || // CR\n      c === 0x20 // SP\n      ;\n    }\n  }]);\n\n  return Lexer;\n}();\n\nmodule.exports = Lexer;","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/parser/lexer.js"],"names":["Lexer","buf","outer","pos","objects","Object","create","_outer","state","len","subarray","String","fromCharCode","apply","str","getString","trial","before","done","count","_error","isWhiteSpace","offset","err","Error","warning","console","warn","c","_nextCharCode","sign","isFloat","undefined","nr","parseFloat","parseInt","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nclass Lexer {\n  constructor(buf, outer) {\n    this.buf = buf\n    this.pos = 0\n    this.objects = Object.create(null)\n    this._outer = outer\n    this.state = outer ? outer.state : {}\n  }\n\n  get outer() {\n    return this._outer || this\n  }\n\n  read(len) {\n    const buf = this.buf.subarray(this.pos, this.pos + len)\n    this.pos += len\n    return buf\n  }\n\n  getString(len) {\n    return String.fromCharCode.apply(null, this.buf.subarray(this.pos, this.pos + len))\n  }\n\n  readString(len) {\n    const str = this.getString(len)\n    this.pos += len\n    return str\n  }\n\n  skipEOL(len, trial) {\n    const before = this.pos\n\n    let done  = false\n    let count = 0\n    while (!done && (!len || count < len)) {\n      switch (this.buf[this.pos]) {\n        case 0x0d: // CR\n          if (this.buf[this.pos + 1] === 0x0a) { // CR LF\n            this.pos++\n          }\n          // falls through\n        case 0x0a: // LF\n          this.pos++\n          count++\n          break\n        default:\n          done = true\n          break\n      }\n    }\n\n    if (!count || (len && count < len)) {\n      if (!trial) {\n        this._error('EOL expected but not found')\n      }\n      this.pos = before\n      return false\n    }\n\n    return true\n  }\n\n  skipComments(trial) {\n    if (this.getString(1) !== '%') {\n      return false\n    }\n\n    let pos = this.pos;\n    while (this.buf[pos] !== 0x0A) {\n      pos++;\n    }\n\n    if (!trial) {\n      this.pos = pos;\n    }\n\n    return true\n  }\n\n  skipWhitespace(len, trial) {\n    const before = this.pos\n\n    let done  = false\n    let count = 0\n    while (!done && (!len || count < len)) {\n      // skip comments\n      if (this.buf[this.pos] === 0x25 /* % */) {\n        while (this.buf[this.pos] !== 0x0A) {\n          this.pos++;\n        }\n      }\n\n      if (Lexer.isWhiteSpace(this.buf[this.pos])) {\n        this.pos++\n        count++\n      } else {\n        done = true\n      }\n    }\n\n    if (!count || (len && count < len)) {\n      if (!trial) {\n        this._error('Whitespace expected but not found')\n      }\n      this.pos = before\n      return false\n    }\n\n    return true\n  }\n\n  skipSpace(len, trial) {\n    const before = this.pos\n\n    let done  = false\n    let count = 0\n    while (!done && (!len || count < len)) {\n      if (this.buf[this.pos] === 0x20) {\n        this.pos++\n        count++\n      } else {\n        done = true\n      }\n    }\n\n    if ((len > 0 && !count) || (len && count < len)) {\n      if (!trial) {\n        this._error('Space expected but not found')\n      }\n      this.pos = before\n      return false\n    }\n\n    return true\n  }\n\n  shift(offset) {\n    this.pos += offset\n  }\n\n  _nextCharCode() {\n    return this.buf[this.pos++]\n  }\n\n  _nextChar() {\n    return String.fromCharCode(this.buf[this.pos++])\n  }\n\n  _error(err) {\n    throw new Error(err)\n  }\n\n  _warning(warning) {\n    console.warn(warning)\n  }\n\n  // e.g. 123 43445 +17 −98 0 34.5 −3.62 +123.6 4. −.002 0.0\n  readNumber(trial) {\n    const before = this.pos\n\n    let c = this._nextCharCode()\n    let sign = 1\n    let isFloat = false\n    let str = ''\n\n    switch (true) {\n      case c === 0x2b: // '+'\n        break\n      case c === 0x2d: // '-'\n        sign = -1\n        break\n      case c === 0x2e: // '.'\n        isFloat = true\n        str = '0.'\n        break\n      case c < 0x30 || c > 0x39: // not a number\n        if (!trial) {\n          this._error('Invalid number at ' + this.pos + ': ' + String.fromCharCode(c) + ' (code: ' + c + ')')\n        }\n        this.pos = before\n        return undefined\n      default:\n        str += String.fromCharCode(c)\n        break\n    }\n\n    let done = false\n    while (!done && (c = this._nextCharCode()) >= 0) {\n      switch (true) {\n        case c === 0x2e: // '.'\n          if (isFloat) {\n            done = true\n          } else {\n            isFloat = true\n            str += '.'\n          }\n          break\n        case c >= 0x30 && c <= 0x39: // 0 - 9\n          str += String.fromCharCode(c)\n          break\n        default:\n          done = true\n          break\n      }\n    }\n\n    this.pos--\n\n    const nr = isFloat ? parseFloat(str, 10) : parseInt(str, 10)\n    return nr * sign\n  }\n\n  static isWhiteSpace(c) {\n    return (\n      c === 0x00 || // NULL\n      c === 0x09 || // TAB\n      c === 0x0A || // LF\n      c === 0x0C || // FF\n      c === 0x0D || // CR\n      c === 0x20    // SP\n    )\n  }\n}\n\nmodule.exports = Lexer\n"]},"metadata":{},"sourceType":"script"}