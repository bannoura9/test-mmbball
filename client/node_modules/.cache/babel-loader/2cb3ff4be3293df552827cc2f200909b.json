{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/src/components/video-library.jsx\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { flattenDeep, groupBy } from \"lodash\";\nimport RecentlyAdded from \"../components/modules/recently-added\";\nimport mockData from \"../data.json\";\nvar playlistIds = [\"PLtAzkECGU1yXDNefSuSbxODu9hrRK0UtP\", \"PLtAzkECGU1yXhKBF1t-pJmH8S1nuBiu8z\"];\n\nvar VideoLibrary = function VideoLibrary() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      playlists = _useState2[0],\n      setPlaylists = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      videos = _useState4[0],\n      setVideos = _useState4[1];\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                /*const playlistRes = await fetch(\n                  \"https://www.googleapis.com/youtube/v3/playlists?\" +\n                    new URLSearchParams({\n                      key: \"AIzaSyCAH8cKrD6ASDhtfMYIfEGzNU6v9mcltRI\",\n                      part: \"id,snippet\",\n                      id: playlistIds.join(\",\"),\n                    })\n                );\n                const playlistResJsOn = await playlistRes.json();\n                console.log(\n                  \"playlistResJsOn==>>\",\n                  playlistResJsOn.items.map(({ id, snippet }) => ({\n                    id,\n                    title: snippet.localized.title,\n                  }))\n                );\n                setPlaylists(\n                  playlistResJsOn.items.map(({ id, snippet }) => ({\n                    id,\n                    title: snippet.localized.title,\n                  }))\n                );\n                 const playlistItemsResJsOn = await Promise.all(\n                  playlistIds.map(async (playlistId) => {\n                    const playlistItemsRes = await fetch(\n                      \"https://www.googleapis.com/youtube/v3/playlistItems?\" +\n                        new URLSearchParams({\n                          part: \"snippet\",\n                          key: \"AIzaSyCAH8cKrD6ASDhtfMYIfEGzNU6v9mcltRI\",\n                          channelId: \"UCHBDAkjxufCaEfmRaf7Bj3Q\",\n                          maxResults: 200,\n                          playlistId,\n                        })\n                    );\n                    return playlistItemsRes.json();\n                  })\n                );\n                 console.log(\n                  \"playlistItemsResJsOn==>>\",\n                  flattenDeep(\n                    playlistItemsResJsOn.map((playlistItems) =>\n                      playlistItems.items.map((i) => i.snippet)\n                    )\n                  )\n                );\n                setVideos(\n                  flattenDeep(\n                    playlistItemsResJsOn.map((playlistItems) =>\n                      playlistItems.items.map((i) => i.snippet)\n                    )\n                  )\n                );*/\n                setPlaylists(mockData.playlists);\n                setVideos(mockData.videos);\n              } catch (err) {\n                console.log(\"err==>>\", err);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, \"Hello\", /*#__PURE__*/React.createElement(RecentlyAdded, {\n    videos: videos,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default VideoLibrary;","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/src/components/video-library.jsx"],"names":["React","useEffect","useState","flattenDeep","groupBy","RecentlyAdded","mockData","playlistIds","VideoLibrary","playlists","setPlaylists","videos","setVideos","err","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,QAArC;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,WAAW,GAAG,CAClB,oCADkB,EAElB,oCAFkB,CAApB;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,kBACSN,QAAQ,CAAC,EAAD,CADjB;AAAA;AAAA,MAClBO,SADkB;AAAA,MACPC,YADO;;AAAA,mBAEGR,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAElBS,MAFkB;AAAA,MAEVC,SAFU;;AAGzBX,EAAAA,SAAS,CAAC,YAAM;AACd,6DAAC;AAAA;AAAA;AAAA;AAAA;AACC,kBAAI;AACF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGQS,gBAAAA,YAAY,CAACJ,QAAQ,CAACG,SAAV,CAAZ;AACAG,gBAAAA,SAAS,CAACN,QAAQ,CAACK,MAAV,CAAT;AACD,eAzDD,CAyDE,OAAOE,GAAP,EAAY;AACZC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACD;;AA5DF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AA8DD,GA/DQ,EA+DN,EA/DM,CAAT;AAiEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEE,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEF,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA1ED;;AA4EA,eAAeH,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { flattenDeep, groupBy } from \"lodash\";\nimport RecentlyAdded from \"../components/modules/recently-added\";\nimport mockData from \"../data.json\";\n\nconst playlistIds = [\n  \"PLtAzkECGU1yXDNefSuSbxODu9hrRK0UtP\",\n  \"PLtAzkECGU1yXhKBF1t-pJmH8S1nuBiu8z\",\n];\n\nconst VideoLibrary = () => {\n  const [playlists, setPlaylists] = useState([]);\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        /*const playlistRes = await fetch(\n          \"https://www.googleapis.com/youtube/v3/playlists?\" +\n            new URLSearchParams({\n              key: \"AIzaSyCAH8cKrD6ASDhtfMYIfEGzNU6v9mcltRI\",\n              part: \"id,snippet\",\n              id: playlistIds.join(\",\"),\n            })\n        );\n        const playlistResJsOn = await playlistRes.json();\n        console.log(\n          \"playlistResJsOn==>>\",\n          playlistResJsOn.items.map(({ id, snippet }) => ({\n            id,\n            title: snippet.localized.title,\n          }))\n        );\n        setPlaylists(\n          playlistResJsOn.items.map(({ id, snippet }) => ({\n            id,\n            title: snippet.localized.title,\n          }))\n        );\n\n        const playlistItemsResJsOn = await Promise.all(\n          playlistIds.map(async (playlistId) => {\n            const playlistItemsRes = await fetch(\n              \"https://www.googleapis.com/youtube/v3/playlistItems?\" +\n                new URLSearchParams({\n                  part: \"snippet\",\n                  key: \"AIzaSyCAH8cKrD6ASDhtfMYIfEGzNU6v9mcltRI\",\n                  channelId: \"UCHBDAkjxufCaEfmRaf7Bj3Q\",\n                  maxResults: 200,\n                  playlistId,\n                })\n            );\n            return playlistItemsRes.json();\n          })\n        );\n\n        console.log(\n          \"playlistItemsResJsOn==>>\",\n          flattenDeep(\n            playlistItemsResJsOn.map((playlistItems) =>\n              playlistItems.items.map((i) => i.snippet)\n            )\n          )\n        );\n        setVideos(\n          flattenDeep(\n            playlistItemsResJsOn.map((playlistItems) =>\n              playlistItems.items.map((i) => i.snippet)\n            )\n          )\n        );*/\n        setPlaylists(mockData.playlists);\n        setVideos(mockData.videos);\n      } catch (err) {\n        console.log(\"err==>>\", err);\n      }\n    })();\n  }, []);\n\n  return (\n    <div>\n      Hello\n      <RecentlyAdded videos={videos} />\n    </div>\n  );\n};\n\nexport default VideoLibrary;\n"]},"metadata":{},"sourceType":"module"}