{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar opentype = require('opentype.js');\n\nmodule.exports = /*#__PURE__*/function () {\n  function FontSubset(font) {\n    _classCallCheck(this, FontSubset);\n\n    this.font = font;\n    this.name = 'PDFJS+' + this.font.names.fontFamily.en;\n    this.glyphs = {\n      '0': this.font.charToGlyph(String.fromCharCode(0)),\n      // notDef glyph\n      '32': this.font.charToGlyph(String.fromCharCode(32)) // space\n\n    };\n    this.subset = {\n      '0': 0,\n      '32': 32\n    };\n    this.mapping = {\n      '0': 0,\n      '32': 32\n    };\n    this.pos = 33;\n  }\n\n  _createClass(FontSubset, [{\n    key: \"use\",\n    value: function use(chars) {\n      for (var i = 0, len = chars.length; i < len; ++i) {\n        var code = chars.charCodeAt(i);\n\n        if (code in this.mapping || code < 33) {\n          continue;\n        }\n\n        var glyph = this.font.charToGlyph(chars[i]);\n        this.subset[this.pos] = code;\n        this.mapping[code] = this.pos;\n        this.glyphs[this.pos] = glyph;\n        this.pos++;\n      }\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(str) {\n      var codes = [];\n\n      for (var i = 0, len = str.length; i < len; ++i) {\n        codes.push(this.mapping[str.charCodeAt(i)]);\n      }\n\n      return String.fromCharCode.apply(String, codes);\n    }\n  }, {\n    key: \"cmap\",\n    value: function cmap() {\n      return this.subset;\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      var glyphs = [];\n\n      for (var pos in this.glyphs) {\n        glyphs.push(this.glyphs[pos]);\n      }\n\n      var font = new opentype.Font({\n        familyName: this.name,\n        styleName: this.font.names.fontSubfamily.en,\n        unitsPerEm: this.font.unitsPerEm,\n        ascender: this.font.ascender,\n        descender: this.font.descender,\n        glyphs: glyphs\n      });\n      return font.toArrayBuffer();\n    }\n  }]);\n\n  return FontSubset;\n}();","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/font/subset.js"],"names":["opentype","require","module","exports","font","name","names","fontFamily","en","glyphs","charToGlyph","String","fromCharCode","subset","mapping","pos","chars","i","len","length","code","charCodeAt","glyph","str","codes","push","apply","Font","familyName","styleName","fontSubfamily","unitsPerEm","ascender","descender","toArrayBuffer"],"mappings":"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","sourcesContent":["'use strict'\n\nconst opentype = require('opentype.js')\n\nmodule.exports = class FontSubset {\n  constructor(font) {\n    this.font = font\n    this.name = 'PDFJS+' + this.font.names.fontFamily.en\n\n    this.glyphs = {\n      '0':  this.font.charToGlyph(String.fromCharCode(0)), // notDef glyph\n      '32': this.font.charToGlyph(String.fromCharCode(32)), // space\n    }\n    this.subset  = { '0': 0, '32': 32 }\n    this.mapping = { '0': 0, '32': 32 }\n    this.pos     = 33\n  }\n\n  use(chars) {\n    for (let i = 0, len = chars.length; i < len; ++i) {\n      const code = chars.charCodeAt(i)\n      if (code in this.mapping || code < 33) {\n        continue\n      }\n\n      const glyph = this.font.charToGlyph(chars[i])\n\n      this.subset[this.pos] = code\n      this.mapping[code]    = this.pos\n      this.glyphs[this.pos] = glyph\n\n      this.pos++\n    }\n  }\n\n  encode(str) {\n    const codes = []\n    for (let i = 0, len = str.length; i < len; ++i) {\n      codes.push(this.mapping[str.charCodeAt(i)])\n    }\n    return String.fromCharCode.apply(String, codes)\n  }\n\n  cmap() {\n    return this.subset\n  }\n\n  save() {\n    const glyphs = []\n    for (const pos in this.glyphs) {\n      glyphs.push(this.glyphs[pos])\n    }\n    const font = new opentype.Font({\n      familyName: this.name,\n      styleName:  this.font.names.fontSubfamily.en,\n      unitsPerEm: this.font.unitsPerEm,\n      ascender:   this.font.ascender,\n      descender:  this.font.descender,\n      glyphs:     glyphs\n    })\n    return font.toArrayBuffer()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}