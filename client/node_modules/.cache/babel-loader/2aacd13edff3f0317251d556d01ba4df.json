{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Fragment = require('./fragment');\n\nvar util = require('./util');\n\nvar ops = require('./ops');\n\nvar PDF = require('./object');\n\nmodule.exports = /*#__PURE__*/function (_Fragment) {\n  _inherits(Header, _Fragment);\n\n  var _super = _createSuper(Header);\n\n  function Header(doc, parent) {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _super.call(this, doc, parent); // a header could consist out of multiple FormXObjects and this property is later used keep\n    // track of them\n\n    _this._objects = []; // this array keeps track of all page numbers rendered in the header, because their rendering\n    // is postponed\n\n    _this._pageNumbers = []; // create new cursor for header context to not inherite bottom offset of document, which the\n    // document receives from having a header\n\n    _this._cursor = _this._cursor.clone();\n    return _this;\n  } /// private API\n  // prevent page breaks inside a header\n\n\n  _createClass(Header, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(level) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error('Header is to long (tried to execute a page break inside the header)');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _pageBreak(_x) {\n        return _pageBreak2.apply(this, arguments);\n      }\n\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._doc._endPage();\n\n              case 2:\n                _context2.next = 4;\n                return this._setup();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n\n      return _start;\n    }()\n  }, {\n    key: \"_setup\",\n    value: function () {\n      var _setup2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._cursor.reset(); // these objects will be written to the document after all FormXObjects are written\n                // it is therefore necessary to keep track of them seperately\n\n\n                this._resources = new PDF.Object();\n\n                this._doc._registerObject(this._resources);\n\n                this._bbox = new PDF.Object();\n\n                this._doc._registerObject(this._bbox); // a FormXObject will receive a Resources dictionary similar to Page objects, which is\n                // why it is necessary to keep track of used fonts and xobjects\n\n\n                this.fonts = new PDF.Dictionary({});\n                this.xobjects = new PDF.Dictionary({}); // this header object has a similar interface like the page object and it is used as such\n                // until the header has finished rendering (necessary to track the used fonts and xobjects)\n\n                this._doc._contentObjCreator = this._createObject.bind(this); // close current content object and start a new one (by setting the _contentObjCreator object\n                // above, the new content object will be created by calling the header's _createObject\n                // method)\n\n                _context3.next = 10;\n                return this._doc._startContentObject();\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _setup() {\n        return _setup2.apply(this, arguments);\n      }\n\n      return _setup;\n    }()\n  }, {\n    key: \"_createObject\",\n    value: function _createObject() {\n      // this is going to be called on each _startContentObject() call as long as the header\n      // is rendered, which creates a FormXObject (instead of the usual plain object)\n      var xobj = new PDF.Object('XObject');\n      xobj.prop('Subtype', 'Form');\n      xobj.prop('FormType', 1);\n      xobj.prop('BBox', this._bbox.toReference());\n      xobj.prop('Resources', this._resources.toReference());\n      return xobj;\n    } // while most parts of the header is static (i.e. rendered only once and then reused), there are\n    // some dynamic parts (e.g. page numbers) which are rendered on each page\n    // these parts are rendered here\n\n  }, {\n    key: \"_render\",\n    value: function () {\n      var _render2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        var Text, _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this._pageNumbers.length === 0)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                // lazy load text, because of cyclic dependencies of Fragment\n                Text = require('./text');\n                _iterator = _createForOfIteratorHelper(this._pageNumbers);\n                _context6.prev = 4;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var instance, withPageCount, lhs, rhs, fonts, font, fontAlias, xobj, currentPage, alias, txt;\n                  return _regeneratorRuntime.wrap(function _loop$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          instance = _step.value;\n                          withPageCount = false;\n\n                          if (instance.fn) {\n                            lhs = instance.fn(1, 1);\n                            rhs = instance.fn(1, 10);\n                            withPageCount = lhs.length !== rhs.length;\n                          } // postpone writing page number until the end of the document, because the total page count\n                          // is not known now\n\n\n                          if (!withPageCount) {\n                            _context5.next = 22;\n                            break;\n                          }\n\n                          // since there is only text with an already known font, the fonts dictionary can already\n                          // be build\n                          fonts = new PDF.Dictionary({});\n                          font = _this2._doc._fontInstance(instance.opts.font || _this2._doc.defaultFont);\n                          fontAlias = _this2._doc._fontAlias(font);\n                          fonts.set(fontAlias, _this2._doc._fonts[fontAlias].o.toReference()); // create the FormXObject that is used to render the page numbers\n\n                          xobj = new PDF.Object('XObject');\n                          xobj.prop('Subtype', 'Form');\n                          xobj.prop('FormType', 1);\n                          xobj.prop('BBox', new PDF.Array([instance.x, instance.y, instance.x + instance.width, instance.y - instance.height]));\n                          xobj.prop('Resources', new PDF.Dictionary({\n                            ColorSpace: new PDF.Dictionary({\n                              CS1: new PDF.Array([new PDF.Name('ICCBased'), _this2._doc._colorSpace.toReference()])\n                            }),\n                            ProcSet: new PDF.Array([new PDF.Name('Text')]),\n                            Font: fonts\n                          }));\n\n                          _this2._doc._registerObject(xobj); // calculate the number of the currently rendered page\n\n\n                          currentPage = _this2._doc._pages.length; // add a handler to the document that will be called when the document is finished up\n                          // this is necessary because the total count of pages is not yet known\n\n                          _this2._doc._finalize.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                            var pageCount, str, txt;\n                            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    _context4.next = 2;\n                                    return _this2._doc._startContentObject(xobj);\n\n                                  case 2:\n                                    // setup the cursor to the position the page numbers should be rendered at\n                                    _this2._cursor.y = instance.y;\n                                    _this2._cursor.x = instance.x;\n                                    _this2._cursor.width = instance.width; // negate document bottomOffset, which is there because of this header\n\n                                    _this2._cursor.bottomOffset = -_this2._doc._cursor.bottomOffset; // create the text representing the page numbers\n\n                                    pageCount = _this2._doc._pages.length;\n                                    str = instance.fn ? instance.fn(currentPage, pageCount) : currentPage; // manually render the text\n\n                                    txt = new Text(_this2._doc, _this2, instance.opts);\n                                    txt._parts++;\n                                    txt._ended = true;\n                                    _context4.next = 13;\n                                    return txt._start();\n\n                                  case 13:\n                                    _context4.next = 15;\n                                    return txt._render(str, instance.opts);\n\n                                  case 15:\n                                    _context4.next = 17;\n                                    return txt._end();\n\n                                  case 17:\n                                    _context4.next = 19;\n                                    return _this2._doc._endContentObject();\n\n                                  case 19:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _callee4);\n                          }))); // render and register the FormXObject to the current page\n\n\n                          alias = new PDF.Name(_this2._doc._aliases.next('X'));\n                          _this2._doc._currentContent._xobjects[alias] = xobj.toReference();\n                          _context5.next = 20;\n                          return _this2._doc._write(ops.Do(alias));\n\n                        case 20:\n                          _context5.next = 35;\n                          break;\n\n                        case 22:\n                          // if there is now total page count necessary, we can write the current page number directly\n                          _this2._cursor.y = instance.y;\n                          _this2._cursor.x = instance.x;\n                          _this2._cursor.width = instance.width; // negate document bottomOffset, which is there because of this header\n\n                          _this2._cursor.bottomOffset = -_this2._doc._cursor.bottomOffset;\n                          txt = new Text(_this2._doc, _this2, instance.opts);\n                          txt._parts++;\n                          txt._ended = true;\n                          _context5.next = 31;\n                          return txt._start();\n\n                        case 31:\n                          _context5.next = 33;\n                          return txt._render(String(_this2._doc._pages.length), instance.opts);\n\n                        case 33:\n                          _context5.next = 35;\n                          return txt._end();\n\n                        case 35:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.delegateYield(_loop(), \"t0\", 9);\n\n              case 9:\n                _context6.next = 7;\n                break;\n\n              case 11:\n                _context6.next = 16;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t1 = _context6[\"catch\"](4);\n\n                _iterator.e(_context6.t1);\n\n              case 16:\n                _context6.prev = 16;\n\n                _iterator.f();\n\n                return _context6.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, this, [[4, 13, 16, 19]]);\n      }));\n\n      function _render() {\n        return _render2.apply(this, arguments);\n      }\n\n      return _render;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _iterator2, _step2, content, alias, _alias;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // save the height of the header\n                // this is used to correctly offset the cursor when rendering the page\n                this.height = this._doc._cursor.startY - this._doc._cursor.y;\n                _context7.next = 3;\n                return this._doc._endContentObject();\n\n              case 3:\n                // collect all fonts and xobjects that are used in the header\n                _iterator2 = _createForOfIteratorHelper(this._doc._contents);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    content = _step2.value;\n\n                    for (alias in content._fonts) {\n                      this.fonts.add(alias, content._fonts[alias]);\n                    }\n\n                    for (_alias in content._xobjects) {\n                      this.xobjects.add(_alias, content._xobjects[_alias]);\n                    }\n                  } // create the Resources object for the header's FormXObjects\n\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                this._resources.content = new PDF.Dictionary({\n                  ColorSpace: new PDF.Dictionary({\n                    CS1: new PDF.Array([new PDF.Name('ICCBased'), this._doc._colorSpace.toReference()])\n                  }),\n                  ProcSet: new PDF.Array([new PDF.Name('PDF'), new PDF.Name('Text'), new PDF.Name('ImageB'), new PDF.Name('ImageC'), new PDF.Name('ImageI')]),\n                  Font: this.fonts,\n                  XObject: this.xobjects\n                });\n                _context7.next = 8;\n                return this._doc._writeObject(this._resources);\n\n              case 8:\n                // setup the BBox\n                this._bbox.content = new PDF.Array([this._cursor.startX, this._cursor.startY, this._cursor.startX + this._doc._cursor.width, this._doc._cursor.y]);\n                _context7.next = 11;\n                return this._doc._writeObject(this._bbox);\n\n              case 11:\n                // the header can consist out of multiple FormXObjects, which are collected here\n                this._objects = this._doc._contents.map(function (c) {\n                  return c._object;\n                }); // reset everything\n\n                this._doc._cursor.reset();\n\n                this._doc._currentContent = null;\n                this._doc._contents.length = 0;\n                this._doc._contentObjCreator = null;\n                this._cursor.y -= this.height;\n\n              case 17:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n\n      return _end;\n    }() /// public API\n\n  }, {\n    key: \"pageNumber\",\n    value: function pageNumber(fn, opts) {\n      var _this3 = this;\n\n      if (typeof fn === 'object') {\n        opts = fn;\n        fn = undefined;\n      }\n\n      if (!opts || typeof opts !== 'object') {\n        opts = {};\n      }\n\n      var font = this._doc._fontInstance(opts.font || this._doc.defaultFont);\n\n      var fontSize = opts.fontSize || this._doc.defaultFontSize;\n      var lineHeight = opts.lineHeight || this._doc.defaultLineHeight;\n      var height = font.lineHeight(fontSize, true) * lineHeight;\n      var descent = -font.descent(fontSize) * lineHeight;\n\n      this._begin(null);\n\n      this._pending.push(function () {\n        _this3._pageNumbers.push({\n          y: _this3._cursor.y,\n          x: _this3._cursor.x,\n          width: _this3._cursor.width,\n          height: height + descent,\n          opts: opts,\n          fn: fn\n        });\n\n        _this3._cursor.y -= height + descent;\n        return Promise.resolve();\n      });\n    }\n  }]);\n\n  return Header;\n}(Fragment);","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/header.js"],"names":["Fragment","require","util","ops","PDF","module","exports","doc","parent","_objects","_pageNumbers","_cursor","clone","level","Error","_doc","_endPage","_setup","reset","_resources","Object","_registerObject","_bbox","fonts","Dictionary","xobjects","_contentObjCreator","_createObject","bind","_startContentObject","xobj","prop","toReference","length","Text","instance","withPageCount","fn","lhs","rhs","font","_fontInstance","opts","defaultFont","fontAlias","_fontAlias","set","_fonts","o","Array","x","y","width","height","ColorSpace","CS1","Name","_colorSpace","ProcSet","Font","currentPage","_pages","_finalize","push","bottomOffset","pageCount","str","txt","_parts","_ended","_start","_render","_end","_endContentObject","alias","_aliases","next","_currentContent","_xobjects","_write","Do","String","startY","_contents","content","add","XObject","_writeObject","startX","map","c","_object","undefined","fontSize","defaultFontSize","lineHeight","defaultLineHeight","descent","_begin","_pending","Promise","resolve"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Fragment = require('./fragment')\nconst util = require('./util')\nconst ops = require('./ops')\nconst PDF = require('./object')\n\nmodule.exports = class Header extends Fragment {\n  constructor(doc, parent) {\n    super(doc, parent)\n\n    // a header could consist out of multiple FormXObjects and this property is later used keep\n    // track of them\n    this._objects = []\n\n    // this array keeps track of all page numbers rendered in the header, because their rendering\n    // is postponed\n    this._pageNumbers = []\n\n    // create new cursor for header context to not inherite bottom offset of document, which the\n    // document receives from having a header\n    this._cursor = this._cursor.clone()\n  }\n\n  /// private API\n\n  // prevent page breaks inside a header\n  async _pageBreak(level) {\n    throw new Error('Header is to long (tried to execute a page break inside the header)')\n  }\n\n  async _start() {\n    // changing the header will force ending and starting with a new page\n    await this._doc._endPage()\n\n    await this._setup()\n  }\n\n  async _setup() {\n    this._cursor.reset()\n\n    // these objects will be written to the document after all FormXObjects are written\n    // it is therefore necessary to keep track of them seperately\n    this._resources = new PDF.Object()\n    this._doc._registerObject(this._resources)\n    this._bbox = new PDF.Object()\n    this._doc._registerObject(this._bbox)\n\n    // a FormXObject will receive a Resources dictionary similar to Page objects, which is\n    // why it is necessary to keep track of used fonts and xobjects\n    this.fonts    = new PDF.Dictionary({})\n    this.xobjects = new PDF.Dictionary({})\n\n    // this header object has a similar interface like the page object and it is used as such\n    // until the header has finished rendering (necessary to track the used fonts and xobjects)\n    this._doc._contentObjCreator = this._createObject.bind(this)\n\n    // close current content object and start a new one (by setting the _contentObjCreator object\n    // above, the new content object will be created by calling the header's _createObject\n    // method)\n    await this._doc._startContentObject()\n  }\n\n  _createObject() {\n    // this is going to be called on each _startContentObject() call as long as the header\n    // is rendered, which creates a FormXObject (instead of the usual plain object)\n    const xobj = new PDF.Object('XObject')\n    xobj.prop('Subtype', 'Form')\n    xobj.prop('FormType', 1)\n    xobj.prop('BBox', this._bbox.toReference())\n    xobj.prop('Resources', this._resources.toReference())\n    return xobj\n  }\n\n  // while most parts of the header is static (i.e. rendered only once and then reused), there are\n  // some dynamic parts (e.g. page numbers) which are rendered on each page\n  // these parts are rendered here\n  async _render() {\n    if (this._pageNumbers.length === 0) {\n      return\n    }\n\n    // lazy load text, because of cyclic dependencies of Fragment\n    const Text = require('./text')\n\n    for (const instance of this._pageNumbers) {\n      let withPageCount = false\n      if (instance.fn) {\n        const lhs = instance.fn(1, 1)\n        const rhs = instance.fn(1, 10)\n        withPageCount = lhs.length !== rhs.length\n      }\n\n      // postpone writing page number until the end of the document, because the total page count\n      // is not known now\n      if (withPageCount) {\n        // since there is only text with an already known font, the fonts dictionary can already\n        // be build\n        const fonts = new PDF.Dictionary({})\n        const font = this._doc._fontInstance(instance.opts.font || this._doc.defaultFont)\n        const fontAlias = this._doc._fontAlias(font)\n        fonts.set(fontAlias, this._doc._fonts[fontAlias].o.toReference())\n\n        // create the FormXObject that is used to render the page numbers\n        const xobj = new PDF.Object('XObject')\n        xobj.prop('Subtype', 'Form')\n        xobj.prop('FormType', 1)\n        xobj.prop('BBox', new PDF.Array([instance.x, instance.y, instance.x + instance.width, instance.y - instance.height]))\n        xobj.prop('Resources', new PDF.Dictionary({\n          ColorSpace: new PDF.Dictionary({\n            CS1: new PDF.Array([new PDF.Name('ICCBased'), this._doc._colorSpace.toReference()]),\n          }),\n          ProcSet: new PDF.Array([new PDF.Name('Text')]),\n          Font:    fonts,\n        }))\n        this._doc._registerObject(xobj)\n\n        // calculate the number of the currently rendered page\n        const currentPage = this._doc._pages.length\n\n        // add a handler to the document that will be called when the document is finished up\n        // this is necessary because the total count of pages is not yet known\n        this._doc._finalize.push(async () => {\n          await this._doc._startContentObject(xobj)\n\n          // setup the cursor to the position the page numbers should be rendered at\n          this._cursor.y = instance.y\n          this._cursor.x = instance.x\n          this._cursor.width = instance.width\n\n          // negate document bottomOffset, which is there because of this header\n          this._cursor.bottomOffset = -this._doc._cursor.bottomOffset\n\n          // create the text representing the page numbers\n          const pageCount =  this._doc._pages.length\n          const str = instance.fn ? instance.fn(currentPage, pageCount) : currentPage\n\n          // manually render the text\n          const txt = new Text(this._doc, this, instance.opts)\n          txt._parts++\n          txt._ended = true\n          await txt._start()\n          await txt._render(str, instance.opts)\n          await txt._end()\n\n          await this._doc._endContentObject()\n        })\n\n        // render and register the FormXObject to the current page\n        const alias = new PDF.Name(this._doc._aliases.next('X'))\n        this._doc._currentContent._xobjects[alias] = xobj.toReference()\n        await this._doc._write(ops.Do(alias))\n      } else {\n        // if there is now total page count necessary, we can write the current page number directly\n        this._cursor.y = instance.y\n        this._cursor.x = instance.x\n        this._cursor.width = instance.width\n\n        // negate document bottomOffset, which is there because of this header\n        this._cursor.bottomOffset = -this._doc._cursor.bottomOffset\n\n        const txt = new Text(this._doc, this, instance.opts)\n        txt._parts++\n        txt._ended = true\n        await txt._start()\n        await txt._render(String(this._doc._pages.length), instance.opts)\n        await txt._end()\n      }\n    }\n  }\n\n  async _end() {\n    // save the height of the header\n    // this is used to correctly offset the cursor when rendering the page\n    this.height = this._doc._cursor.startY - this._doc._cursor.y\n\n    await this._doc._endContentObject()\n\n    // collect all fonts and xobjects that are used in the header\n    for (const content of this._doc._contents) {\n      for (const alias in content._fonts) {\n        this.fonts.add(alias, content._fonts[alias])\n      }\n\n      for (const alias in content._xobjects) {\n        this.xobjects.add(alias, content._xobjects[alias])\n      }\n    }\n\n    // create the Resources object for the header's FormXObjects\n    this._resources.content = new PDF.Dictionary({\n      ColorSpace: new PDF.Dictionary({\n        CS1: new PDF.Array([new PDF.Name('ICCBased'), this._doc._colorSpace.toReference()]),\n      }),\n      ProcSet: new PDF.Array([\n        new PDF.Name('PDF'),\n        new PDF.Name('Text'),\n        new PDF.Name('ImageB'),\n        new PDF.Name('ImageC'),\n        new PDF.Name('ImageI')\n      ]),\n      Font:    this.fonts,\n      XObject: this.xobjects\n    })\n    await this._doc._writeObject(this._resources)\n\n    // setup the BBox\n    this._bbox.content = new PDF.Array([\n      this._cursor.startX, this._cursor.startY,\n      this._cursor.startX + this._doc._cursor.width, this._doc._cursor.y\n    ])\n    await this._doc._writeObject(this._bbox)\n\n    // the header can consist out of multiple FormXObjects, which are collected here\n    this._objects = this._doc._contents.map(c => c._object)\n\n    // reset everything\n    this._doc._cursor.reset()\n\n    this._doc._currentContent = null\n    this._doc._contents.length = 0\n\n    this._doc._contentObjCreator = null\n\n    this._cursor.y -= this.height\n  }\n\n  /// public API\n\n  pageNumber(fn, opts) {\n    if (typeof fn === 'object') {\n      opts = fn\n      fn = undefined\n    }\n\n    if (!opts || typeof opts !== 'object') {\n      opts = {}\n    }\n\n    const font = this._doc._fontInstance(opts.font || this._doc.defaultFont)\n    const fontSize = opts.fontSize || this._doc.defaultFontSize\n    const lineHeight = opts.lineHeight || this._doc.defaultLineHeight\n\n    const height = font.lineHeight(fontSize, true) * lineHeight\n    const descent = -font.descent(fontSize) * lineHeight\n\n    this._begin(null)\n    this._pending.push(() => {\n      this._pageNumbers.push({\n        y: this._cursor.y,\n        x: this._cursor.x,\n        width: this._cursor.width,\n        height: height + descent,\n        opts: opts,\n        fn: fn\n      })\n\n      this._cursor.y -= height + descent\n      return Promise.resolve()\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}