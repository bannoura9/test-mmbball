{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Fragment = require('./fragment');\n\nvar util = require('./util');\n\nvar ops = require('./ops');\n\nvar Cell = require('./cell');\n\nmodule.exports = /*#__PURE__*/function () {\n  function Row(doc, parent, opts) {\n    _classCallCheck(this, Row);\n\n    Fragment.prototype._init.call(this, doc, parent);\n\n    this.opts = opts; // use an own queue for pending operations\n\n    this._pending = []; // keep track of the cells that have already been ended;\n    // this is necessary to be able to still draw their background and finalize their rendering\n    // once all cells are ended (scenario where not all cells span the same amount of pages)\n\n    this._endedCells = []; // keep a count of not ended cells to adjust the rotation of cells on page breaks properly\n\n    this._columns = 0; // when a page break occures inside a cell, the cells are rotated before an actual page\n    // break is rendered; i.e., all cells of the row are rendered horizontally\n\n    this._rotated = 0; // this is used to keep track of the starting y of the row to reset the cursor's y to\n    // this value for each cell (since they are horizontally aligned)\n\n    this._y = 0; // on each page the row is rendered on, the row keeps track of the maximal y (or minimum\n    // in terms of PDF, because y 0 is on the bottom) a cell is rendered to, to be able to align\n    // the backgrounds of all cells to the same height\n\n    this._endY = null;\n    this._widths = [];\n    this._topBorderWidth = 0;\n    this._topBorderColor = 0x000000;\n    this._bottomBorderWidth = 0;\n    this._bottomBorderColor = 0x000000;\n    this._borderVerticalWidths = [];\n    this._borderVerticalColors = [];\n    this._minHeight = opts.minHeight || 0;\n    this._hasTopBorder = false;\n    this._insideBreak = false;\n    this._startRendering = null;\n  } /// private API\n\n\n  _createClass(Row, [{\n    key: \"_pageBreak\",\n    value: function () {\n      var _pageBreak2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(level, insideBreak) {\n        var _iterator, _step, cell;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._insideBreak = insideBreak; // the pending queue looks as follows: [ [cell1], [cell2], ..., [celln], endRow]\n                // the currently rendered cell is at the head of the queue and therefore removed and\n                // re-inserted at the second last position\n\n                this._pending.splice(this._pending.length - 2, 0, this._pending.shift()); // test whether we have rotated all cells of the row\n\n\n                if (!(this._rotated < this._columns - 1)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this._rotated++; // move to the next cell\n\n                this._nextColumn();\n\n                _context.next = 33;\n                break;\n\n              case 7:\n                // execute the pageBreak (rendering background, trigger retrospective page breaks, ...) of all\n                // already ended cells manually\n                _iterator = _createForOfIteratorHelper(this._endedCells);\n                _context.prev = 8;\n\n                _iterator.s();\n\n              case 10:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 18;\n                  break;\n                }\n\n                cell = _step.value;\n                this._cursor.y = cell._cursor.bottom;\n                _context.next = 15;\n                return cell._pageBreak(level - 1, insideBreak);\n\n              case 15:\n                // pageBreak may add new callbacks to the cell's pending queue, which is however not anymore\n                // contained in the document's queue, therefor add these callbacks to the row's queue\n                while (cell._pending.length) {\n                  this._pending.unshift(cell._pending.shift());\n                }\n\n              case 16:\n                _context.next = 10;\n                break;\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator.e(_context.t0);\n\n              case 23:\n                _context.prev = 23;\n\n                _iterator.f();\n\n                return _context.finish(23);\n\n              case 26:\n                _context.next = 28;\n                return this._drawBorders(true, insideBreak);\n\n              case 28:\n                // reset the rotation\n                this._rotated = 0; // execute an actual page break\n\n                _context.next = 31;\n                return this._parent._pageBreak(level + 1, insideBreak);\n\n              case 31:\n                // store starting y to be able to align all cells horizontally\n                this._y = this._cursor.y;\n                this._endY = null;\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 20, 23, 26]]);\n      }));\n\n      function _pageBreak(_x, _x2) {\n        return _pageBreak2.apply(this, arguments);\n      }\n\n      return _pageBreak;\n    }()\n  }, {\n    key: \"_nextColumn\",\n    value: function _nextColumn() {\n      // reset the current y back to the row start to align all cells horizontally\n      this._cursor.y = this._y;\n    }\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this._minHeight > 0 && !this._parent._cursor.doesFit(this._minHeight))) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this._parent._pageBreak(1);\n\n              case 3:\n                // save start y of the row to be able to align all cells horizontally\n                this._y = this._cursor.y; // block execution until the row knows about all its cells, otherwise it is possible that the\n                // rendering scheduler (_pending) removes this._pending before the cell's end got called\n\n                if (this._ended) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return new Promise(function (resolve) {\n                  _this._startRendering = resolve;\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n\n      return _start;\n    }()\n  }, {\n    key: \"_end\",\n    value: function () {\n      var _end2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _iterator2, _step2, cell;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // the actual end logic of cells has been postponed until here where it is called manually\n                _iterator2 = _createForOfIteratorHelper(this._endedCells);\n                _context3.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                cell = _step2.value;\n                this._cursor.y = this._endY + cell.paddingBottom;\n                _context3.next = 8;\n                return Cell.prototype._end.call(cell);\n\n              case 8:\n                _context3.next = 3;\n                break;\n\n              case 10:\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _iterator2.e(_context3.t0);\n\n              case 15:\n                _context3.prev = 15;\n\n                _iterator2.f();\n\n                return _context3.finish(15);\n\n              case 18:\n                _context3.next = 20;\n                return this._drawBorders(false);\n\n              case 20:\n                // reset cursor\n                this._cursor.x = this._cursor.startX;\n                this._cursor.y = this._endY;\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 12, 15, 18]]);\n      }));\n\n      function _end() {\n        return _end2.apply(this, arguments);\n      }\n\n      return _end;\n    }()\n  }, {\n    key: \"_begin\",\n    value: function _begin(ctx) {\n      Fragment.prototype._begin.call(this, ctx);\n    }\n  }, {\n    key: \"_drawBorders\",\n    value: function () {\n      var _drawBorders2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(isPageBreak, isInsideBreak) {\n        var hasBorder, chunk, y1, y2, left, borderWidth, borderColor, i, len, bw, bc, x, totalWidth, x1, x2, y, _y;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(isPageBreak && !isInsideBreak)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                this._hasTopBorder = true;\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                // draw border\n                hasBorder = false;\n                chunk = ops.q(); // save graphics state\n\n                y1 = this._y;\n                y2 = isPageBreak ? this._cursor.bottom : this._endY;\n                left = this._cursor.startX;\n                borderWidth = 0;\n                borderColor = null;\n\n                if (this._borderVerticalWidths) {\n                  for (i = 0, len = this._borderVerticalWidths.length; i < len; ++i) {\n                    // line width\n                    bw = this._borderVerticalWidths[i];\n\n                    if (bw > 0) {\n                      if (borderWidth !== bw) {\n                        chunk += ops.w(bw);\n                        borderWidth = bw;\n                      } // stroking color\n\n\n                      bc = this._borderVerticalColors[i];\n\n                      if (!borderColor || !util.rgbEqual(borderColor, bc)) {\n                        chunk += ops.SC(bc[0], bc[1], bc[2]);\n                        borderColor = bc;\n                      } // fill path\n\n\n                      x = left;\n\n                      if (i === 0) {\n                        x += bw / 2;\n                      } else if (i === len - 1) {\n                        x -= bw / 2;\n                      }\n\n                      chunk += ops.S(x, y1, 'm', x, y2, 'l');\n                    }\n\n                    left += this._widths[i];\n                  }\n\n                  hasBorder = true;\n                }\n\n                totalWidth = this._widths.reduce(function (lhs, rhs) {\n                  return lhs + rhs;\n                }, 0);\n                x1 = this._cursor.startX;\n                x2 = x1 + totalWidth;\n\n                if (this._hasTopBorder && this._topBorderWidth > 0) {\n                  this._hasTopBorder = false; // line width\n\n                  if (borderWidth !== this._topBorderWidth) {\n                    chunk += ops.w(this._topBorderWidth);\n                    borderWidth = this._topBorderWidth;\n                  } // stroking color\n\n\n                  if (!borderColor || !util.rgbEqual(borderColor, this._topBorderColor)) {\n                    chunk += ops.SC(this._topBorderColor[0], this._topBorderColor[1], this._topBorderColor[2]);\n                    borderColor = this._topBorderColor;\n                  } // fill path\n\n\n                  y = y1 - this._topBorderWidth / 2;\n                  chunk += ops.S(x1, y, 'm', x2, y, 'l');\n                  hasBorder = true;\n                }\n\n                if (!isPageBreak && this._bottomBorderWidth > 0) {\n                  // line width\n                  if (borderWidth !== this._bottomBorderWidth) {\n                    chunk += ops.w(this._bottomBorderWidth);\n                    borderWidth = this._bottomBorderWidth;\n                  } // stroking color\n\n\n                  if (!borderColor || !util.rgbEqual(borderColor, this._bottomBorderColor)) {\n                    chunk += ops.SC(this._bottomBorderColor[0], this._bottomBorderColor[1], this._bottomBorderColor[2]);\n                    borderColor = this._bottomBorderColor;\n                  } // fill path\n\n\n                  _y = y2 + this._bottomBorderWidth / 2;\n                  chunk += ops.S(x1, _y, 'm', x2, _y, 'l');\n                  hasBorder = true;\n                }\n\n                if (!hasBorder) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                chunk += ops.Q(); // restore graphics state\n\n                _context4.next = 20;\n                return this._doc._startContentObject(null, true);\n\n              case 20:\n                _context4.next = 22;\n                return this._doc._write(chunk);\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _drawBorders(_x3, _x4) {\n        return _drawBorders2.apply(this, arguments);\n      }\n\n      return _drawBorders;\n    }() /// public API\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this._columns !== this._widths.length) {\n        if (this._columns > this._widths.length) {\n          throw new Error(\"Row has \".concat(this.columns, \" cells but only \").concat(this._widths.length, \" columns\"));\n        } // fill missing columns with empty cells\n\n\n        for (var i = this.columns; i < this._widths.length; ++i) {\n          this.cell();\n        }\n      }\n\n      if (this._startRendering) {\n        this._startRendering();\n      }\n\n      return Fragment.prototype.end.call(this);\n    }\n  }, {\n    key: \"cell\",\n    value: function cell(text, opts) {\n      // normalize arguments\n      if (text !== null && typeof text === 'object') {\n        opts = text;\n        text = undefined;\n      }\n\n      if (!opts || typeof opts !== 'object') {\n        opts = {};\n      }\n\n      opts = Object.assign({}, this.opts, opts); // create cell and set cell's width according to row options\n\n      var column = this._columns++;\n\n      if (!(column in this._widths)) {\n        throw new Error('row columns already exceeded, cannot create another cell');\n      }\n\n      if (opts.colspan > 1) {\n        for (var i = column + 1, len = column + opts.colspan; i < len; ++i) {\n          if (!(i in this._widths)) {\n            throw new Error('row columns already exceeded, colspan to big');\n          }\n\n          this._widths[column] += this._widths[i];\n        }\n\n        this._widths.splice(column + 1, opts.colspan - 1);\n\n        if (this._borderVerticalWidths) {\n          this._borderVerticalWidths.splice(column + 1, opts.colspan - 1);\n        }\n      }\n\n      if (opts.minHeight > this._minHeight) {\n        this._minHeight = opts.minHeight;\n      } // adjust cell padding to add enough space for borders\n\n\n      if (this._borderVerticalWidths) {\n        var borderWidthLeft = this._borderVerticalWidths[column];\n        var borderWidthRight = this._borderVerticalWidths[column + 1];\n\n        if (borderWidthLeft > 0) {\n          if (column === 0) {\n            // is first\n            opts.borderLeftWidth = borderWidthLeft;\n          } else {\n            opts.borderLeftWidth = borderWidthLeft / 2;\n          }\n        }\n\n        if (borderWidthRight > 0) {\n          if (column === this._widths.length - 1) {\n            // is last\n            opts.borderRightWidth = borderWidthRight;\n          } else {\n            opts.borderRightWidth = borderWidthRight / 2;\n          }\n        }\n      }\n\n      if (this._hasTopBorder && this._topBorderWidth > 0) {\n        opts.borderTopWidth = this._topBorderWidth;\n      }\n\n      if (this._bottomBorderWidth > 0) {\n        opts.borderBottomWidth = this._bottomBorderWidth;\n      }\n\n      var ctx = new Cell(this._doc, this, Object.assign({}, opts, {\n        width: this._widths[column]\n      }));\n      ctx._drawBorders = false;\n\n      this._begin(ctx); // move the cell to the right by the width of each previous cell\n\n\n      for (var _i = 0; _i < column; ++_i) {\n        ctx._cursor.startX += this._widths[_i] || 0;\n      }\n\n      ctx._pending.push(function () {\n        return ctx._start();\n      }); // override cell's end logic, which is also postponed until the row ends\n\n\n      ctx._end = endCell.bind(ctx, this);\n\n      this._pending.push(ctx._pending);\n\n      if (typeof text === 'string' && text.length > 0) {\n        ctx.text(text, opts);\n      }\n\n      return ctx;\n    }\n  }]);\n\n  return Row;\n}();\n\nfunction endCell(_x5) {\n  return _endCell.apply(this, arguments);\n}\n\nfunction _endCell() {\n  _endCell = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(row) {\n    var height;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            // apply bottom padding\n            this._cursor.y -= this.paddingBottom;\n            height = this._startY - this._cursor.y;\n\n            if (height < this.opts.minHeight) {\n              this._cursor.y -= this.opts.minHeight - height;\n            } // decrease the counter of active cells\n\n\n            row._columns--; // reset the parent property, to prevent endless recursion when the pageBreak handler of the\n            // cell is called later on\n\n            this._parent = null; // keep track of the ended cell\n\n            row._endedCells.push(this); // if, last row has been ended, trigger page break manually to continue with other cells on\n            // the next page\n\n\n            if (!(row._columns > 0 && row._rotated === row._columns)) {\n              _context5.next = 9;\n              break;\n            }\n\n            _context5.next = 9;\n            return row._pageBreak(2, row._insideBreak);\n\n          case 9:\n            // keep track of the ending y which is nearest to the page end\n            if (row._endY === null || this._cursor.y < row._endY) {\n              row._endY = this._cursor.y;\n            }\n\n            this._endLayerRef = this._doc._currentContent; // move to the next cell\n\n            row._nextColumn();\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _endCell.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/mikebannoura/Dropbox/My Mac (MacBook-Pro-Mike.local)/Desktop/mmbball-app/client/node_modules/pdfjs/lib/row.js"],"names":["Fragment","require","util","ops","Cell","module","exports","doc","parent","opts","prototype","_init","call","_pending","_endedCells","_columns","_rotated","_y","_endY","_widths","_topBorderWidth","_topBorderColor","_bottomBorderWidth","_bottomBorderColor","_borderVerticalWidths","_borderVerticalColors","_minHeight","minHeight","_hasTopBorder","_insideBreak","_startRendering","level","insideBreak","splice","length","shift","_nextColumn","cell","_cursor","y","bottom","_pageBreak","unshift","_drawBorders","_parent","doesFit","_ended","Promise","resolve","paddingBottom","_end","x","startX","ctx","_begin","isPageBreak","isInsideBreak","hasBorder","chunk","q","y1","y2","left","borderWidth","borderColor","i","len","bw","w","bc","rgbEqual","SC","S","totalWidth","reduce","lhs","rhs","x1","x2","Q","_doc","_startContentObject","_write","Error","columns","end","text","undefined","Object","assign","column","colspan","borderWidthLeft","borderWidthRight","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","width","push","_start","endCell","bind","row","height","_startY","_endLayerRef","_currentContent"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Fragment = require('./fragment')\nconst util = require('./util')\nconst ops = require('./ops')\nconst Cell = require('./cell')\n\nmodule.exports = class Row {\n  constructor(doc, parent, opts) {\n    Fragment.prototype._init.call(this, doc, parent)\n\n    this.opts = opts\n\n    // use an own queue for pending operations\n    this._pending = []\n\n    // keep track of the cells that have already been ended;\n    // this is necessary to be able to still draw their background and finalize their rendering\n    // once all cells are ended (scenario where not all cells span the same amount of pages)\n    this._endedCells = []\n\n    // keep a count of not ended cells to adjust the rotation of cells on page breaks properly\n    this._columns = 0\n\n    // when a page break occures inside a cell, the cells are rotated before an actual page\n    // break is rendered; i.e., all cells of the row are rendered horizontally\n    this._rotated = 0\n\n    // this is used to keep track of the starting y of the row to reset the cursor's y to\n    // this value for each cell (since they are horizontally aligned)\n    this._y = 0\n\n    // on each page the row is rendered on, the row keeps track of the maximal y (or minimum\n    // in terms of PDF, because y 0 is on the bottom) a cell is rendered to, to be able to align\n    // the backgrounds of all cells to the same height\n    this._endY = null\n\n    this._widths = []\n    this._topBorderWidth = 0\n    this._topBorderColor = 0x000000\n    this._bottomBorderWidth = 0\n    this._bottomBorderColor = 0x000000\n    this._borderVerticalWidths = []\n    this._borderVerticalColors = []\n    this._minHeight = opts.minHeight || 0\n\n    this._hasTopBorder = false\n    this._insideBreak = false\n    this._startRendering = null\n  }\n\n  /// private API\n\n  async _pageBreak(level, insideBreak) {\n    this._insideBreak = insideBreak\n\n    // the pending queue looks as follows: [ [cell1], [cell2], ..., [celln], endRow]\n    // the currently rendered cell is at the head of the queue and therefore removed and\n    // re-inserted at the second last position\n    this._pending.splice(this._pending.length - 2, 0 , this._pending.shift())\n\n    // test whether we have rotated all cells of the row\n    if (this._rotated < this._columns - 1) {\n      this._rotated++\n\n      // move to the next cell\n      this._nextColumn()\n    } else {\n      // execute the pageBreak (rendering background, trigger retrospective page breaks, ...) of all\n      // already ended cells manually\n      for (const cell of this._endedCells) {\n        this._cursor.y = cell._cursor.bottom\n        await cell._pageBreak(level - 1, insideBreak)\n\n        // pageBreak may add new callbacks to the cell's pending queue, which is however not anymore\n        // contained in the document's queue, therefor add these callbacks to the row's queue\n        while (cell._pending.length) {\n          this._pending.unshift(cell._pending.shift())\n        }\n      }\n\n      await this._drawBorders(true, insideBreak)\n\n      // reset the rotation\n      this._rotated = 0\n\n      // execute an actual page break\n      await this._parent._pageBreak(level + 1, insideBreak)\n\n      // store starting y to be able to align all cells horizontally\n      this._y = this._cursor.y\n\n      this._endY = null\n    }\n  }\n\n  _nextColumn() {\n    // reset the current y back to the row start to align all cells horizontally\n    this._cursor.y = this._y\n  }\n\n  async _start() {\n    if (this._minHeight > 0 && !this._parent._cursor.doesFit(this._minHeight)) {\n      await this._parent._pageBreak(1)\n    }\n\n    // save start y of the row to be able to align all cells horizontally\n    this._y = this._cursor.y\n\n    // block execution until the row knows about all its cells, otherwise it is possible that the\n    // rendering scheduler (_pending) removes this._pending before the cell's end got called\n    if (!this._ended) {\n      await new Promise(resolve => {this._startRendering = resolve})\n    }\n  }\n\n  async _end() {\n    // the actual end logic of cells has been postponed until here where it is called manually\n    for (const cell of this._endedCells) {\n      this._cursor.y = this._endY + cell.paddingBottom\n      await Cell.prototype._end.call(cell)\n    }\n\n    await this._drawBorders(false)\n\n    // reset cursor\n    this._cursor.x = this._cursor.startX\n    this._cursor.y = this._endY\n  }\n\n  _begin(ctx) {\n    Fragment.prototype._begin.call(this, ctx)\n  }\n\n  async _drawBorders(isPageBreak, isInsideBreak) {\n    // detect a retrospective page break and not render borders in this case\n    if (isPageBreak && !isInsideBreak) {\n      this._hasTopBorder = true\n      return\n    }\n\n    // draw border\n    let hasBorder = false\n    let chunk = ops.q() // save graphics state\n\n    const y1 = this._y\n    const y2 = isPageBreak ? this._cursor.bottom : this._endY\n    let left = this._cursor.startX\n    let borderWidth = 0\n    let borderColor = null\n\n    if (this._borderVerticalWidths) {\n      for (let i = 0, len = this._borderVerticalWidths.length; i < len; ++i) {\n        // line width\n        const bw = this._borderVerticalWidths[i]\n        if (bw > 0) {\n          if (borderWidth !== bw) {\n            chunk += ops.w(bw)\n            borderWidth = bw\n          }\n\n          // stroking color\n          const bc = this._borderVerticalColors[i]\n          if (!borderColor || !util.rgbEqual(borderColor, bc)) {\n            chunk += ops.SC(bc[0], bc[1], bc[2])\n            borderColor = bc\n          }\n\n          // fill path\n          let x = left\n          if (i === 0) {\n            x += bw / 2\n          } else if (i === len - 1) {\n            x -= bw / 2\n          }\n\n          chunk += ops.S(x, y1, 'm', x, y2, 'l')\n        }\n\n        left += this._widths[i]\n      }\n\n      hasBorder = true\n    }\n\n    const totalWidth = this._widths.reduce((lhs, rhs) => lhs + rhs, 0)\n    const x1 = this._cursor.startX\n    const x2 = x1 + totalWidth\n\n    if (this._hasTopBorder && this._topBorderWidth > 0) {\n      this._hasTopBorder = false\n\n      // line width\n      if (borderWidth !== this._topBorderWidth) {\n        chunk += ops.w(this._topBorderWidth)\n        borderWidth = this._topBorderWidth\n      }\n\n      // stroking color\n      if (!borderColor || !util.rgbEqual(borderColor, this._topBorderColor)) {\n        chunk += ops.SC(this._topBorderColor[0], this._topBorderColor[1], this._topBorderColor[2])\n        borderColor = this._topBorderColor\n      }\n\n      // fill path\n      const y = y1 - this._topBorderWidth / 2\n      chunk += ops.S(x1, y, 'm', x2, y, 'l')\n\n      hasBorder = true\n    }\n\n    if (!isPageBreak && this._bottomBorderWidth > 0) {\n      // line width\n      if (borderWidth !== this._bottomBorderWidth) {\n        chunk += ops.w(this._bottomBorderWidth)\n        borderWidth = this._bottomBorderWidth\n      }\n\n      // stroking color\n      if (!borderColor || !util.rgbEqual(borderColor, this._bottomBorderColor)) {\n        chunk += ops.SC(this._bottomBorderColor[0], this._bottomBorderColor[1], this._bottomBorderColor[2])\n        borderColor = this._bottomBorderColor\n      }\n\n      // fill path\n      const y = y2 + this._bottomBorderWidth / 2\n      chunk += ops.S(x1, y, 'm', x2, y, 'l')\n\n      hasBorder = true\n    }\n\n    if (hasBorder) {\n      chunk += ops.Q() // restore graphics state\n\n      await this._doc._startContentObject(null, true)\n      await this._doc._write(chunk)\n    }\n  }\n\n  /// public API\n\n  end() {\n    if (this._columns !== this._widths.length) {\n      if (this._columns > this._widths.length) {\n        throw new Error(`Row has ${this.columns} cells but only ${this._widths.length} columns`)\n      }\n\n      // fill missing columns with empty cells\n      for (let i = this.columns; i < this._widths.length; ++i) {\n        this.cell()\n      }\n    }\n\n    if (this._startRendering) {\n      this._startRendering()\n    }\n    return Fragment.prototype.end.call(this)\n  }\n\n  cell(text, opts) {\n    // normalize arguments\n    if (text !== null && typeof text === 'object') {\n      opts = text\n      text = undefined\n    }\n    if (!opts || typeof opts !== 'object') {\n      opts = {}\n    }\n\n    opts = Object.assign({}, this.opts, opts)\n\n    // create cell and set cell's width according to row options\n    const column = this._columns++\n    if (!(column in this._widths)) {\n      throw new Error('row columns already exceeded, cannot create another cell')\n    }\n\n    if (opts.colspan > 1) {\n      for (let i = column + 1, len = column + opts.colspan; i < len; ++i) {\n        if (!(i in this._widths)) {\n          throw new Error('row columns already exceeded, colspan to big')\n        }\n\n        this._widths[column] += this._widths[i]\n      }\n\n      this._widths.splice(column + 1, opts.colspan - 1)\n\n      if (this._borderVerticalWidths) {\n        this._borderVerticalWidths.splice(column + 1, opts.colspan - 1)\n      }\n    }\n\n    if (opts.minHeight > this._minHeight) {\n      this._minHeight = opts.minHeight\n    }\n\n    // adjust cell padding to add enough space for borders\n    if (this._borderVerticalWidths) {\n      const borderWidthLeft = this._borderVerticalWidths[column]\n      const borderWidthRight = this._borderVerticalWidths[column + 1]\n\n      if (borderWidthLeft > 0) {\n        if (column === 0) { // is first\n          opts.borderLeftWidth = borderWidthLeft\n        } else {\n          opts.borderLeftWidth = borderWidthLeft / 2\n        }\n      }\n\n      if (borderWidthRight > 0) {\n        if (column === this._widths.length - 1) { // is last\n          opts.borderRightWidth = borderWidthRight\n        } else {\n          opts.borderRightWidth = borderWidthRight / 2\n        }\n      }\n    }\n\n    if (this._hasTopBorder && this._topBorderWidth > 0) {\n      opts.borderTopWidth = this._topBorderWidth\n    }\n\n    if (this._bottomBorderWidth > 0) {\n      opts.borderBottomWidth = this._bottomBorderWidth\n    }\n\n    const ctx = new Cell(this._doc, this, Object.assign({}, opts, {\n      width: this._widths[column]\n    }))\n    ctx._drawBorders = false\n\n    this._begin(ctx)\n\n    // move the cell to the right by the width of each previous cell\n    for (let i = 0; i < column; ++i) {\n      ctx._cursor.startX += this._widths[i] || 0\n    }\n    ctx._pending.push(() => ctx._start())\n\n    // override cell's end logic, which is also postponed until the row ends\n    ctx._end = endCell.bind(ctx, this)\n\n    this._pending.push(ctx._pending)\n\n    if (typeof text === 'string' && text.length > 0) {\n      ctx.text(text, opts)\n    }\n\n    return ctx\n  }\n}\n\nasync function endCell(row) {\n  // apply bottom padding\n  this._cursor.y -= this.paddingBottom\n\n  const height = this._startY - this._cursor.y\n  if (height < this.opts.minHeight) {\n    this._cursor.y -= this.opts.minHeight - height\n  }\n\n  // decrease the counter of active cells\n  row._columns--\n\n  // reset the parent property, to prevent endless recursion when the pageBreak handler of the\n  // cell is called later on\n  this._parent = null\n\n  // keep track of the ended cell\n  row._endedCells.push(this)\n\n  // if, last row has been ended, trigger page break manually to continue with other cells on\n  // the next page\n  if (row._columns > 0 && row._rotated === row._columns) {\n    // TODO: level hardcoded?\n    await row._pageBreak(2, row._insideBreak)\n  }\n\n  // keep track of the ending y which is nearest to the page end\n  if (row._endY === null || this._cursor.y < row._endY) {\n    row._endY = this._cursor.y\n  }\n\n  this._endLayerRef = this._doc._currentContent\n\n  // move to the next cell\n  row._nextColumn()\n}\n"]},"metadata":{},"sourceType":"script"}